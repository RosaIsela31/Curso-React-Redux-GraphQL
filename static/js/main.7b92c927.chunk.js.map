{"version":3,"sources":["components/card/card.module.css","components/home/home.module.css","components/favs/favs.module.css","components/login/login.module.css","firebase.js","redux/charactersDuck.js","redux/userDuck.js","redux/store.js","components/card/Card.js","components/home/HomePage.js","components/favs/FavPage.js","components/login/LoginPage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collection","initialData","fetching","array","current","favorites","retrieveFavs","dispatch","getState","type","uid","doc","get","then","snap","data","getFavs","user","payload","catch","e","console","log","message","loggedIn","rootReducer","combineReducers","state","action","error","characters","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","onClick","side","Card","name","image","rightClick","leftClick","hide","className","styles","container","card","alt","src","actions","left","size","right","defaultProps","connect","removeCharacterAction","shift","addToFavoritesAction","char","push","set","updateDB","addToFavorites","nextCharacter","renderCharacter","map","i","key","length","doGoogleLoginAction","provider","auth","GoogleAuthProvider","signInWithPopup","loginWithGoogle","storage","displayName","email","photoURL","localStorage","JSON","stringify","logOutAction","signOut","removeItem","PrivateRoute","path","component","rest","getItem","parse","to","Routes","exact","Home","FavPage","LoginPage","App","activeClassName","Boolean","location","hostname","match","store","createStore","applyMiddleware","thunk","axios","res","results","err","response","restoreSessionAction","generateStore","WithRouter","WithStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b92c927.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"card_container__3G4Fa\",\"card\":\"card_card__1py-W\",\"name\":\"card_name__31aE7\",\"actions\":\"card_actions__31KML\",\"left\":\"card_left__kmFAA\",\"right\":\"card_right__ikHyB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__2grJ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favs_container__1T6OY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__2teO8\"};","import firebase from '@firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n let firebaseConfig = {\n  apiKey: \"AIzaSyCe3Vd9tPFsa9ymyCrfLZebJSJVU8IjTek\",\n  authDomain: \"reduxreact-3816c.firebaseapp.com\",\n  databaseURL: \"https://reduxreact-3816c.firebaseio.com\",\n  projectId: \"reduxreact-3816c\",\n  storageBucket: \"reduxreact-3816c.appspot.com\",\n  messagingSenderId: \"165500587660\",\n  appId: \"1:165500587660:web:48ac591b3714521dbdb5a9\",\n  measurementId: \"G-LYH9VB6JGC\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Declarando la base de datos\nlet db = firebase.firestore().collection('favs')\n\nexport function getFavs(uid) {\n  return db.doc(uid).get()\n    .then( snap => { return snap.data().array })\n}\n\n\n// el array es favorites que estÃ¡ dentro del estado\nexport function updateDB(array, uid) {\n  return db.doc(uid).set({ array })\n}\n\nexport function signOutGoogle() {\n  firebase.auth().signOut()\n}\n\nexport function loginWithGoogle() {\n  let provider = new firebase.auth.GoogleAuthProvider();\n  return firebase.auth().signInWithPopup(provider)\n    .then(snap => snap.user)\n}","import axios from 'axios';\nimport { updateDB, getFavs } from '../firebase';\n\n// constants\nlet initialData = {\n  fetching: false,\n  array: [],\n  current: {},\n  favorites: [],\n};\n\nlet URL = \"https://rickandmortyapi.com/api/character\";\n\nlet GET_CHARACTERS = \"GET_CHARACTERS\";\nlet GET_CHARACTERS_SUCCESS = \"GET_CHARACTERS_SUCCESS\";\nlet GET_CHARACTERS_ERROR = \"GET_CHARACTERS_ERROR\";\n\nlet REMOVE_CHARACTER = \"REMOVE_CHARACTER\";\nlet ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\n\nlet GET_FAVS = \"GET_FAVS\";\nlet GET_FAVS_SUCCESS = \"GET_FAVS_SUCCESS\";\nlet GET_FAVS_ERROR = \"GET_FAVS_ERROR\";\n\n// reducer\nexport default function reducer(state = initialData, action){\n  switch(action.type){\n    case GET_FAVS_SUCCESS:\n      return { ...state, fetching: false, favorites: action.payload }\n    case GET_FAVS_ERROR:\n      return { ...state, fetching: false, error: action.payload }\n    case GET_FAVS:\n      return { ...state, fetching: true }\n    case ADD_TO_FAVORITES:\n      return { ...state, ...action.payload }\n    case REMOVE_CHARACTER: \n      return { ...state, array: action.payload }\n    case GET_CHARACTERS:\n      return { ...state, fetching: true }\n    case GET_CHARACTERS_ERROR: \n      return { ...state, fetching: false, error: action.payload }\n    case GET_CHARACTERS_SUCCESS: \n      return { ...state, array: action.payload, fetching: false}\n    default:\n      return state;\n  }\n};\n\n// actions o (thunks) \n// Estas funciones devuelven otra funciÃ³n | tambiÃ©n llamados action creators\n// dispatch y getState son parte del store\n// dispatch ejecuta las acciones \n// getState entrega el store\n\nexport let retrieveFavs = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_FAVS\n  })\n  let { uid } = getState().user;\n  return getFavs(uid)\n    .then( array => {\n      dispatch({\n        type: GET_FAVS_SUCCESS,\n        payload: [...array]\n      })\n    })\n    .catch( e => {\n      console.log(e);\n      dispatch({\n        type: GET_FAVS_ERROR,\n        payload: e.message\n      })\n    })\n};\n\nexport let addToFavoritesAction = () => (dispatch, getState) => {\n  let { array, favorites } = getState().characters;\n  let { uid } = getState().user;\n  let char = array.shift();\n  favorites.push(char);\n  updateDB(favorites, uid) \n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: { array: [...array], favorites: [...favorites] }\n  })\n}\n\nexport let removeCharacterAction = () => (dispatch, getState) => {\n  // donde estÃ¡n los personajes\n  let { array } = getState().characters;\n  array.shift()\n  dispatch({\n    type: REMOVE_CHARACTER,\n    payload: [...array]\n  })\n  \n}\n\n// esta acciÃ³n trae a los personajes\nexport const getCharactersActions = () => (dispatch, getState) => {\n  dispatch({\n    type: GET_CHARACTERS,\n  })\n  return  axios.get(URL)\n    .then(res => {\n      dispatch({\n        type: GET_CHARACTERS_SUCCESS,\n        payload: res.data.results\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: GET_CHARACTERS_ERROR,\n        payload: err.response.message,\n      })\n    })\n};\n","import { loginWithGoogle, signOutGoogle } from '../firebase';\nimport { retrieveFavs } from './charactersDuck';\n\n// constants \nlet initialData = {\n  loggedIn: false,\n  fetching: false,\n}\n\nlet LOGIN = 'LOGIN';\nlet LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nlet LOGIN_ERROR = 'LOGIN_ERROR'; \n\nlet LOG_OUT = 'LOG_OUT';\n\n// reducer | recibe state y action \nexport default function reducer(state = initialData, action) {\n  switch(action.type){\n    case LOG_OUT:\n      return { ...initialData }\n    case LOGIN_SUCCESS:\n      return { ...state, fetching: false, ...action.payload, loggedIn: true }\n    case LOGIN_ERROR:\n      return { ...state, fetching: false, error: action.payload }\n    case LOGIN:\n      return { ...state, fetching: true }\n    default:\n      return state\n  }\n};\n\n// funciÃ³n auxiliar que ayuda a guardar cosas en el localstorage\n \nfunction saveStorage(storage) {\n  localStorage.storage = JSON.stringify(storage)\n}\n\n// action (action creator)\nexport let logOutAction = () =>  (dispatch, getState) => {\n  signOutGoogle()\n  dispatch({\n    type: LOG_OUT,\n  })\n  localStorage.removeItem('storage')\n}\n\nexport let restoreSessionAction = () => dispatch => {\n  let storage = localStorage.getItem('storage')\n  storage = JSON.parse(storage)\n  if(storage && storage.user){\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: storage.user\n    })\n  }\n}\n\nexport let doGoogleLoginAction = () => (dispatch, getState) => {\n  dispatch({\n    type: LOGIN,\n  })\n  return loginWithGoogle()\n    .then( user => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { \n          uid: user.uid,\n          displayName: user.displayName,\n          email: user.email,\n          photoURL: user.photoURL,\n         }\n      })\n      saveStorage(getState())\n      retrieveFavs()(dispatch, getState)\n    })\n    .catch( e => {\n      console.log(e);\n      dispatch({\n        type: LOGIN_ERROR,\n         payload: e.message,\n      })\n    })\n}","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'; \nimport userReducer, { restoreSessionAction } from './userDuck';\nimport charactersReducer, { getCharactersActions } from './charactersDuck';\n\nlet rootReducer = combineReducers({\n  user: userReducer,\n  characters: charactersReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function generateStore(){\n  let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n  // Consiguiendo los personajes por primera vez\n  getCharactersActions()(store.dispatch, store.getState);\n  restoreSessionAction()(store.dispatch)\n  return store\n};","import React from 'react'\nimport styles from './card.module.css'\nimport FontAwesome from 'react-fontawesome'\nimport PropTypes from 'prop-types'\n\nlet rick = \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\"\n\nfunction onClick(side) {\n    return () => console.log(side)\n}\n\nexport default function Card({\n    name, image, rightClick, leftClick, hide\n}) {\n    return (\n        <div className={styles.container}>\n            <div className={styles.card}>\n                <img alt=\"rick\" src={image} />\n                <p className={styles.name}>\n                    {name}\n                </p>\n                {!hide && <div className={styles.actions}>\n                    <div\n                        onClick={leftClick || onClick(\"left\")}\n                        className={styles.left}>\n                        <FontAwesome\n                            name=\"thumbs-down\"\n                            size=\"2x\"\n                        />\n                    </div>\n                    <div\n                        onClick={rightClick || onClick(\"right\")}\n                        className={styles.right}>\n                        <FontAwesome\n                            name=\"heart\"\n                            size=\"2x\"\n                        />\n                    </div>\n                </div>}\n            </div>\n        </div>\n    )\n}\n\nCard.propTypes = {\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    leftClick: PropTypes.func,\n    rightClick: PropTypes.func,\n}\n\nCard.defaultProps = {\n    name: \"Rick Sanches\",\n    image: rick,\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { removeCharacterAction, addToFavoritesAction } from '../../redux/charactersDuck';\nimport Card from '../card/Card';\nimport styles from './home.module.css';\n\nfunction Home({ characters, removeCharacterAction, addToFavoritesAction }) {\n    function addToFavorites() {\n        addToFavoritesAction();\n    };\n    \n    function renderCharacter() {\n        let char = characters[0]\n        return (<Card rightClick={addToFavorites} leftClick={nextCharacter} {...char} />)\n    };\n\n    function nextCharacter () {\n         removeCharacterAction()\n    };\n\n    return (\n        <div className={styles.container}>\n            <h2>Personajes de Rick y Morty</h2>\n            <div>\n                {renderCharacter()}\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        characters: state.characters.array\n    }\n}\n\nexport default connect(mapStateToProps, { removeCharacterAction, addToFavoritesAction })(Home)","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './favs.module.css';\nimport Card from '../card/Card';\n\nfunction FavPage({ characters = [0] }) {\n    function renderCharacter(char, i) {\n        return (\n            <Card hide {...char} key={i} />\n        )\n    }\n    return (\n        <div className={styles.container}>\n            <h2>Favoritos</h2>\n            {characters.map(renderCharacter)}\n            {!characters.length && <h3>No hay personajes agregados</h3>}\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ characters }) => {\n    return {\n        characters: characters.favorites,\n    }\n}\n\n\nexport default connect(mapStateToProps)(FavPage);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { doGoogleLoginAction, logOutAction } from '../../redux/userDuck';\nimport styles from './login.module.css';\n\nfunction LoginPage({ loggedIn, fetching, doGoogleLoginAction, logOutAction }) {\n    \n    function doLogin() {\n        doGoogleLoginAction()\n    }\n\n    function doLogOut() {\n        logOutAction()\n    }\n\n    if(fetching){\n         return <h1>Cargando...</h1>\n    }\n\n    return (\n        <div className={styles.container}>\n            {loggedIn ?\n                <h1>\n                    Cierra tu sesiÃ³n\n                </h1> :\n                <h1>\n                    Inicia SesiÃ³n con Google\n                </h1>\n            }\n            {loggedIn ? \n                <button onClick={doLogOut}>\n                    Cerrar SesiÃ³n\n                </button> :\n                <button onClick={doLogin}>\n                    Iniciar\n                </button>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ user: {fetching, loggedIn} }) => {\n    return {\n        fetching,\n        loggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, { doGoogleLoginAction, logOutAction })(LoginPage);\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './components/home/HomePage';\nimport FavPage from './components/favs/FavPage';\nimport LoginPage from './components/login/LoginPage';\n// import GraphHome from './components/home/GraphHome';\n\nconst PrivateRoute = ({ path, component, ...rest }) => {\n    let storage = localStorage.getItem('storage');\n    storage = JSON.parse(storage)\n    if(storage && storage.user ) {\n        return <Route path={path} component={component} {...rest} />\n    } \n    else {\n        return <Redirect to=\"/login\" {...rest} />\n    }\n}\n\nexport default function Routes() {\n    return (\n        <Switch>\n            <PrivateRoute exact path=\"/\" component={Home} />\n            <PrivateRoute path=\"/favs\" component={FavPage} />\n            <Route path=\"/login\" component={LoginPage} />\n        </Switch>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { NavLink } from 'react-router-dom'\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"nav-bar\">\n        <NavLink className=\"link\" activeClassName=\"active\" exact to=\"/\">\n          Inicio\n        </NavLink>\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/favs\">\n          Favoritos\n        </NavLink>\n        <NavLink className=\"link\" activeClassName=\"active\" to=\"/login\">\n          Login\n        </NavLink>\n      </div>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport generateStore from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'font-awesome/css/font-awesome.css';\n// import ApolloClient from 'apollo-boost';\n// import { ApolloProvider } from 'react-apollo';\n\nlet store = generateStore();\n\n// let client = new ApolloClient({\n//   uri: \"https://rickandmortyapi.com/graphql\"\n// })\n\nlet WithRouter = () => <BrowserRouter><App /></BrowserRouter>\nlet WithStore = () => <Provider store={store}><WithRouter/></Provider>\n// let WithApollo = () => <ApolloProvider client={client}><WithStore/></ApolloProvider>\n\nReactDOM.render(<WithStore />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}